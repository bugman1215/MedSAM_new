xlab = "Time (Days)",
ylab = "Survival Probability",
surv.median.line = "hv",
risk.table = "abs_pct",
conf.int = TRUE,
linetype = "strata",
censor = TRUE,
palette = c("#E7B800"),
legend.labs = c("Veterans")
) +
labs(title = "Kaplan-Meier Plot")
fit_prior <- survfit(Surv(time, status) ~ prior, data = veteran)
ggsurvplot(
fit_prior,
data = veteran,
size = 1,
pval = TRUE,
legend.title = "Prior Therapies",
legend.labs = c("Stage 0", "Stage 10"),
legend = "bottom",
risk.table = TRUE,
risk.table.height = 0.2,
xlab = "Time (days)",
ylab = "Survival Probability",
conf.int = TRUE,
palette = c("#00BA38", "#F8766D")
) +
labs(title = "Kaplan-Meier Curves by Prior Therapies") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
legend.position = "bottom"
)
fit_prior <- survfit(Surv(time, status) ~ prior, data = veteran)
ggsurvplot(
fit_prior,
data = veteran,
size = 1,
pval = TRUE,
legend.title = "Prior Therapies",
legend.labs = c("Stage 0", "Stage 10"),
legend = "bottom",
risk.table = TRUE,
risk.table.height = 0.2,
xlab = "Time (days)",
ylab = "Survival Probability",
conf.int = TRUE,
palette = c("#00BA38", "#F8766D")
) +
labs(title = "Kaplan-Meier Curves by Prior Therapies") +
fit_prior <- survfit(Surv(time, status) ~ prior, data = veteran)
ggsurvplot(
fit_prior,
data = veteran,
size = 1,
pval = TRUE,
legend.title = "Prior Therapies",
legend.labs = c("Stage 0", "Stage 10"),
legend = "bottom",
risk.table = TRUE,
risk.table.height = 0.2,
xlab = "Time (days)",
ylab = "Survival Probability",
conf.int = TRUE,
palette = c("#00BA38", "#F8766D")
) +
labs(title = "Kaplan-Meier Curves by Prior Therapies")
1 - pchisq(logrank_prior$chisq, length(logrank_prior$n) - 1)
1 - pchisq(result_logrank$chisq, length(result_logrank$n) - 1)
result_logrank <- survdiff(Surv(time, status) ~ prior, data = veteran)
print(result_logrank)
1 - pchisq(result_logrank$chisq, length(result_logrank$n) - 1)
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), round, 2),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
model_coxph <- coxph(Surv(time, status) ~ ., data = veteran)
summary(model_coxph)
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), round, 2),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
library(survival)
library(survminer)
library(survival)
library(broom)
library(dplyr)
library(kableExtra)
library(dotwhisker)
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), round, 2),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
# Generate a formatted table with kableExtra
results_table <- results_df %>%
kable("html", escape = FALSE) %>%
kable_styling("striped", full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "15em") %>%
column_spec(2, width = "10em") %>%
column_spec(3:5, width = "8em each")
# Print the table
print(results_table)
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), ~round(.x, 2)),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
results_table <- results_df %>%
kable("html", escape = FALSE) %>%
kable_styling("striped", full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "15em") %>%
column_spec(2, width = "10em") %>%
column_spec(3:5, width = "8em each")
print(results_table)
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), ~round(.x, 2)),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
print(results_table)
results_df <- broom::tidy(model_coxph,
exp = TRUE, conf.int = TRUE) %>%
relabel_predictors(trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky performance score",
diagtime = "months from diagnosis to randomisation",
age = "Age(in month)",
prior = "prior therapy"
) %>%
rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high,
`Term` = term) %>%
select(Term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(`P-value` = ifelse(`P-value` == 0.00, "< 0.01", `P-value`)) %>%
kable() %>% kable_styling("striped")
results_table <- results_df %>%
kable("html", escape = FALSE) %>%
kable_styling("striped", full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "15em") %>%
column_spec(2, width = "10em") %>%
column_spec(3:5, width = "8em each")
plot(cox.zph(model_coxph))
results_df <- broom::tidy(model_coxph,
exp = TRUE, conf.int = TRUE) %>%
relabel_predictors(trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky performance score",
diagtime = "months from diagnosis to randomisation",
age = "Age(in month)",
prior = "prior therapy"
) %>%
rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high,
`Term` = term) %>%
select(Term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(`P-value` = ifelse(`P-value` == 0.00, "< 0.01", `P-value`)) %>%
kable() %>% kable_styling("striped")
results_table <- results_df %>%
kable("html", escape = FALSE, align = 'c') %>%
kable_styling("striped", full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "15em") %>%
column_spec(2, width = "10em") %>%
column_spec(3:5, width = "8em")
results_df <- broom::tidy(model_coxph,
exp = TRUE, conf.int = TRUE) %>%
relabel_predictors(trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky performance score",
diagtime = "months from diagnosis to randomisation",
age = "Age(in month)",
prior = "prior therapy"
) %>%
rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high,
`Term` = term) %>%
select(Term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(`P-value` = ifelse(`P-value` == 0.00, "< 0.01", `P-value`)) %>%
kable() %>% kable_styling("striped")
print(results_table)
broom::tidy(
coxph(Surv(time, status) ~ trt + celltype + karno + diagtime + age + prior,
data = veteran),
exp = TRUE, conf.int = TRUE) %>%
relabel_predictors(trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky performance score",
diagtime = "months from diagnosis to randomisation",
age = "Age(in month)",
prior = "prior therapy"
) %>%
rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high,
`Term` = term) %>%
select(Term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(`P-value` = ifelse(`P-value` == 0.00, "< 0.01", `P-value`)) %>%
kable() %>% kable_styling("striped")
results_df <- broom::tidy(cox_model, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), ~round(.x, 2)),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
results_df <- broom::tidy(model_coxph, exponentiate = TRUE, conf.int = TRUE) %>%
dplyr::mutate(term = dplyr::recode(term,
trt = "Treatment",
celltypesmallcell = "Small Cell (vs. Squamous)",
celltypeadeno = "Adeno (vs. Squamous)",
celltypelarge = "Large (vs. Squamous)",
karno = "Karnofsky Performance Score",
diagtime = "Months from Diagnosis to Randomisation",
age = "Age (in months)",
prior = "Prior Therapy")) %>%
dplyr::rename(`Adjusted Hazard Ratio` = estimate,
`Standard Error` = std.error,
`P-value` = p.value,
`Lower 95% CI` = conf.low,
`Upper 95% CI` = conf.high) %>%
dplyr::select(Term = term, `Adjusted Hazard Ratio`, `Lower 95% CI`, `Upper 95% CI`, `P-value`) %>%
dplyr::mutate(across(where(is.numeric), ~round(.x, 2)),
`P-value` = ifelse(`P-value` < 0.01, "< 0.01", as.character(`P-value`)))
results_table <- results_df %>%
kable("html", escape = FALSE) %>%
kable_styling("striped", full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "15em") %>%
column_spec(2, width = "10em") %>%
column_spec(3:5, width = "8em each")
print(results_table)
knitr::opts_chunk$set(echo = TRUE)
model_interaction <- lm(gpa ~ admit + gre + rank + admit * rank, data = mydata)
library(ResourceSelection)
library(KMsurv)
library(survival)
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
model_interaction <- lm(gpa ~ admit + gre + rank + admit * rank, data = mydata)
summary(model_interaction)
model_logit <- glm(admit ~ gre + gpa, data=mydata, family="binomial")
summary(model_logit)
data(psych)
surv_obj <- with(psych, Surv(time, death))
head(surv_obj)
km_fit <- survfit(surv_obj ~ 1)
plot(km_fit, col = "blue", xlab = "Time", ylab = "Survival Probability", main = "Overall Survival")
surv_obj <- with(psych, Surv(time, death))
head(surv_obj)
surv_obj <- survfit(Surv(time, death) ~ 1, data = psych)
head(surv_obj)
surv_obj <- with(psych, Surv(time, death))
head(surv_obj)
km_fit <- survfit(surv_obj ~ 1)
plot(km_fit, col = "blue", xlab = "Time", ylab = "Survival Probability", main = "Overall Survival")
km_fit_sex <- survfit(surv_obj ~ sex, data = psych)
plot(km_fit_sex, col=c(1, 2))
legend("topright", legend=c("Male", "Female"), col=c(1, 2), lty=1)
survdiff(surv_obj ~ sex, data = psych)
weibull_fit <- survreg(Surv(time, death) ~ sex + age, data = psych, dist="weibull")
summary(weibull_fit)
cox_fit <- coxph(Surv(time, death) ~ sex + age, data = psych)
summary(cox_fit)
cox_fit_no_sex <- coxph(Surv(time, death) ~ age, data = psych)
anova(cox_fit, cox_fit_no_sex, test="Chisq")
strat_cox_fit <- coxph(Surv(time, death) ~ age + strata(sex), data = psych)
summary(strat_cox_fit)
km_fit <- survfit(surv_obj ~ 1)
ggsurvplot(
fit = km_fit,
data = psych,
xlab = "Time",
ylab = "Overall survival probability",
surv.median.line = "hv",
risk.table = TRUE,
conf.int = TRUE,
censor = TRUE,
legend = "none") +
labs(title = "Kaplan-Meier Survival Curve for Psych Data")
km_fit_sex <- survfit(surv_obj ~ sex, data = psych)
plot(km_fit_sex, col=c(1, 2))
legend("topright", legend=c("Male", "Female"), col=c(1, 2), lty=1)
survdiff(surv_obj ~ sex, data = psych)
library(ResourceSelection)
library(KMsurv)
library(survival)
library(survminer)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary library
library(ggplot2)
# Generate 1D data
set.seed(42)  # Set seed for reproducibility
data_1d <- runif(1000, min = -1, max = 1)
# Create a histogram for 1D data
hist(data_1d, breaks = 30, main = "1D Data Distribution",
xlab = "Value", ylab = "Frequency", col = "skyblue", border = "black")
# Generate 2D data
data_2d <- data.frame(
x = runif(2000, min = -1, max = 1),
y = runif(2000, min = -1, max = 1)
)
# Create a scatter plot for 2D data
ggplot(data_2d, aes(x = x, y = y)) +
geom_point(alpha = 0.5) +
labs(title = "2D Data Distribution", x = "X", y = "Y") +
theme_minimal()
# Set seed for reproducibility
set.seed(2024)
# Generate 1000 data points for 1D
data_1d <- runif(1000, min = -1, max = 1)
# Generate 2000 data points for 2D (1000 rows, 2 columns)
data_2d <- matrix(runif(2000, min = -1, max = 1), ncol = 2)
# Plot the 1D data
plot(data_1d, rep(1, 1000), col = 'blue', pch = 1, xlab = "X1", ylab = "", main = "1D Data", xlim = c(-1, 1))
# Plot the 2D data
plot(data_2d[,1], data_2d[,2], col = 'blue', pch = 1, xlab = "X1", ylab = "X2", main = "2D Data", xlim = c(-1, 1), ylim = c(-1, 1))
# Set seed for reproducibility
set.seed(2024)
# Generate 1D data
data_1d <- runif(1000, min = -1, max = 1)
# Count points within the 1D neighborhood (-0.1, 0.1)
count_1d <- sum(abs(data_1d) <= 0.1)
fraction_1d <- count_1d / length(data_1d)
cat("Fraction of 1D points within neighborhood:", fraction_1d, "\n")
# Generate 2D data
data_2d <- matrix(runif(2000, min = -1, max = 1), ncol = 2)
# Calculate squared distance from origin for each point in 2D
squared_distance_2d <- rowSums(data_2d^2)
# Count points within the 2D circle of radius 0.1
count_2d <- sum(squared_distance_2d <= 0.1^2)
fraction_2d <- count_2d / nrow(data_2d)
cat("Fraction of 2D points within neighborhood:", fraction_2d, "\n")
# Function to find the radius in 2D that captures a desired fraction of points
find_radius <- function(data_2d, target_fraction) {
radius <- 0.1
while (TRUE) {
points_in_radius <- # ADD CODE HERE
fraction <- # ADD CODE HERE
if (fraction >= target_fraction) {
return(radius)
}
radius <- radius + 0.01
}
}
# Function to find the radius in 2D that captures a desired fraction of points
find_radius <- function(data_2d, target_fraction) {
radius <- 0.1
while (TRUE) {
points_in_radius <- # ADD CODE HERE
fraction <- # ADD CODE HERE
if (fraction >= target_fraction) {
return(radius)
}
radius <- radius + 0.01
}
}
set.seed(2024)
data_2d <- matrix(runif(2000, min = -1, max = 1), ncol = 2)
target_fraction_1d <- 0.103
matching_radius <- find_radius(data_2d, target_fraction_1d)
# Function to find the radius in 2D that captures a desired fraction of points
find_radius <- function(data_2d, target_fraction) {
radius <- 0.1
while (TRUE) {
points_in_radius <- # ADD CODE HERE
fraction <- # ADD CODE HERE
if (fraction >= target_fraction) {
return(radius)
}
radius <- radius + 0.01
}
}
target_fraction_1d <- 0.103
matching_radius <- find_radius(data_2d, target_fraction_1d)
# Function to find the radius in 2D that captures a desired fraction of points
find_radius <- function(data_2d, target_fraction) {
radius <- 0.1
while (TRUE) {
points_in_radius <- # ADD CODE HERE
fraction <- # ADD CODE HERE
if (fraction >= target_fraction) {
return(radius)
}
radius <- radius + 0.01
}
}
matching_radius <- find_radius(data_2d, fraction_1d)
# Function to find the radius in 2D that captures a desired fraction of points
find_radius <- function(data_2d, target_fraction) {
radius <- 0.1  # Start with a small radius
while (TRUE) {
# Calculate squared distance of each point from the origin
points_in_radius <- rowSums(data_2d^2) <= radius^2
# Calculate the fraction of points within the current radius
fraction <- sum(points_in_radius) / nrow(data_2d)
# If the fraction matches or exceeds the target, return the current radius
if (fraction >= target_fraction) {
return(radius)
}
# Increment the radius
radius <- radius + 0.01
}
}
# Example of how to use this function
# Generate 2D data
set.seed(2024)
data_2d <- matrix(runif(2000, min = -1, max = 1), ncol = 2)
# Target fraction from 1D neighborhood (replace with your calculated fraction)
target_fraction_1d <- 0.2  # Example fraction from the previous step
# Find the radius in 2D that matches this fraction
matching_radius <- find_radius(data_2d, target_fraction_1d)
cat("The radius in 2D that captures the same fraction as in 1D is:", matching_radius, "\n")
